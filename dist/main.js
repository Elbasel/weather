var e={61:(e,n,t)=>{t.d(n,{Z:()=>f});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),A=t(667),s=t.n(A),c=new URL(t(591),t.b),l=new URL(t(887),t.b),p=i()(r());p.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@1,900&display=swap);"]);var d=s()(c),u=s()(l);p.push([e.id,"html{box-sizing:border-box;font-size:14px}*,*:before,*:after{box-sizing:inherit;margin:0;padding:0}body,h1,h2,h3,h4,h5,h6,p,ol,ul{margin:0;padding:0;font-weight:normal;font-family:var(--main-font)}ol,ul{list-style:none}img{max-width:100%;height:auto}body{height:100vh;height:-webkit-fill-available}html{height:-webkit-fill-available;padding:16px}body{background-image:url("+d+');background-size:cover}body{color:#fff;padding:2px;font-family:"Nunito",sans-serif;font-size:16px;display:flex;flex-direction:column}body header{flex:1;border:1px solid rgba(0,0,0,0)}body main{flex:5;border:1px solid rgba(0,0,0,0)}body .forcast{flex:5;border:1px solid rgba(0,0,0,0)}header{display:flex;justify-content:space-between;align-items:center}header h1{letter-spacing:2px}main{display:flex;justify-content:center;align-items:center}.weather{display:flex;flex-direction:column;text-align:center;position:relative;margin-right:30px}.weather h2{font-size:10rem}.weather .text{font-size:2rem;position:absolute;top:170px;left:60px;font-family:sans-serif;letter-spacing:2px}.weather .degree{position:absolute;font-size:3rem;bottom:100px;left:170px}button{width:10%;border:0;color:#fff;background-color:rgba(0,0,0,0);max-width:30px}.forcast{display:flex;flex-direction:column;justify-content:center;gap:16px;max-width:400px}.sun{background-color:#fce570;width:30px;height:30px;border-radius:50%}.row{max-height:30px;font-size:18px;display:grid;grid-template-columns:auto auto 1fr;align-items:center}.row .svg{background-size:cover;background-position:center;width:60px;height:60px;background-image:url('+u+");margin-left:-20px}.temp{text-align:end}","",{version:3,sources:["webpack://./src/styles/reset.css","webpack://./src/styles/index.scss"],names:[],mappings:"AAAA,KACI,qBAAA,CACA,cAAA,CAIJ,mBAGI,kBAAA,CACA,QAAA,CACA,SAAA,CAGJ,+BAUI,QAAA,CACA,SAAA,CACA,kBAAA,CACA,4BAAA,CAGJ,MAEI,eAAA,CAGJ,IACI,cAAA,CACA,WAAA,CCpBJ,KACI,YAAA,CACA,6BAAA,CAEJ,KACI,6BAAA,CACA,YAAA,CAGJ,KACI,wDAAA,CACA,qBAAA,CAGJ,KACI,UAAA,CACA,WAAA,CACA,+BAzBW,CA0BX,cAAA,CACA,YAAA,CACA,qBAAA,CAGA,YACI,MAAA,CACA,8BA/BQ,CAkCZ,UACI,MAAA,CACA,8BApCQ,CAuCZ,cACI,MAAA,CACA,8BAzCQ,CA6ChB,OACI,YAAA,CACA,6BAAA,CACA,kBAAA,CAEA,UACI,kBAAA,CAIR,KACI,YAAA,CACA,sBAAA,CACA,kBAAA,CAGJ,SACI,YAAA,CACA,qBAAA,CACA,iBAAA,CACA,iBAAA,CACA,iBAAA,CAEA,YACI,eAAA,CAEJ,eACI,cAAA,CACA,iBAAA,CACA,SAAA,CACA,SAAA,CACA,sBAAA,CACA,kBAAA,CAGJ,iBACI,iBAAA,CACA,cAAA,CACA,YAAA,CACA,UAAA,CAIR,OACI,SAAA,CACA,QAAA,CACA,UAAA,CACA,8BAAA,CACA,cAAA,CAGJ,SACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,QAAA,CACA,eAAA,CAGJ,KACI,wBAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CAGJ,KACI,eAAA,CACA,cAAA,CACA,YAAA,CACA,mCAAA,CACA,kBAAA,CAEA,UACI,qBAAA,CACA,0BAAA,CACA,UAAA,CACA,WAAA,CACA,wDAAA,CACA,iBAAA,CAIR,MACI,cAAA",sourcesContent:["html {\n    box-sizing: border-box;\n    font-size: 14px;\n    /* color-scheme: dark; */\n}\n\n*,\n*:before,\n*:after {\n    box-sizing: inherit;\n    margin: 0;\n    padding: 0;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nol,\nul {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-family: var(--main-font);\n}\n\nol,\nul {\n    list-style: none;\n}\n\nimg {\n    max-width: 100%;\n    height: auto;\n}\n","@use 'reset.css';\n\n@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@1,900&display=swap');\n\n$primary-dark: #181a1b;\n$secondary-dark: #2b2f31;\n$dark-blue: #004daa;\n$text-white: #d8d4cf;\n$caption-white: #e8e6e3;\n$primary-font: 'Nunito', sans-serif;\n$layout-border: 1px solid white;\n$layout-border: 1px solid rgba(0, 0, 0, 0);\n\n/* ========== END Dark Mode Colors ========== */\n/* To use background images thourgh  url, use it in Javasciprt using \nimport asset statment and e.style.background = `${importedImage}` */\n// Fix for andriod devices\nbody {\n    height: 100vh;\n    height: -webkit-fill-available;\n}\nhtml {\n    height: -webkit-fill-available;\n    padding: 16px;\n}\n\nbody {\n    background-image: url('../assets/night.jpg');\n    background-size: cover;\n}\n\nbody {\n    color: white;\n    padding: 2px;\n    font-family: $primary-font;\n    font-size: 16px;\n    display: flex;\n    flex-direction: column;\n    // align-items: center;\n\n    header {\n        flex: 1;\n        border: $layout-border;\n    }\n\n    main {\n        flex: 5;\n        border: $layout-border;\n    }\n\n    .forcast {\n        flex: 5;\n        border: $layout-border;\n    }\n}\n\nheader {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    h1 {\n        letter-spacing: 2px;\n    }\n}\n\nmain {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.weather {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    position: relative;\n    margin-right: 30px;\n\n    h2 {\n        font-size: 10rem;\n    }\n    .text {\n        font-size: 2rem;\n        position: absolute;\n        top: 170px;\n        left: 60px;\n        font-family: sans-serif;\n        letter-spacing: 2px;\n    }\n\n    .degree {\n        position: absolute;\n        font-size: 3rem;\n        bottom: 100px;\n        left: 170px;\n    }\n}\n\nbutton {\n    width: 10%;\n    border: 0;\n    color: white;\n    background-color: rgba(0, 0, 0, 0);\n    max-width: 30px;\n}\n\n.forcast {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 16px;\n    max-width: 400px;\n}\n\n.sun {\n    background-color: #fce570;\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n}\n\n.row {\n    max-height: 30px;\n    font-size: 18px;\n    display: grid;\n    grid-template-columns: auto auto 1fr;\n    align-items: center;\n\n    .svg {\n        background-size: cover;\n        background-position: center;\n        width: 60px;\n        height: 60px;\n        background-image: url('../assets/icons/day.svg');\n        margin-left: -20px;\n    }\n}\n\n.temp {\n    text-align: end;\n}\n"],sourceRoot:""}]);const f=p},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],A=0;A<e.length;A++){var s=e[A],c=o.base?s[0]+o.base:s[0],l=a[c]||0,p="".concat(c," ").concat(l);a[c]=l+1;var d=t(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)n[d].references++,n[d].updater(u);else{var f=r(u,o);o.byIndex=A,n.splice(A,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var A=t(a[i]);n[A].references--}for(var s=o(e,r),c=0;c<a.length;c++){var l=t(a[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},887:(e,n,t)=>{e.exports=t.p+"c33ef66438b2725bead5.svg"},591:(e,n,t)=>{e.exports=t.p+"98a55a7ddf04bf9e039c.jpg"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;if("string"==typeof import.meta.url&&(e=import.meta.url),!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),i=t.n(a),A=t(565),s=t.n(A),c=t(216),l=t.n(c),p=t(589),d=t.n(p),u=t(61),f={};f.styleTagTransform=d(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=l(),n()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const m="4b1d3b381d9370cb1209f53b25b46f83",C=`https://api.openweathermap.org/data/2.5/weather?q=cityName&appid=${m}`,h=`https://api.openweathermap.org/data/2.5/forecast?q=cityName&appid=${m}`;!async function(e){const n=await async function(e){let n=C.replace("cityName","Cairo");return n+="&units=metric",await(await fetch(n)).json()}(),t=document.querySelector("h2"),o=document.querySelector("body > main > div > p.text");t.textContent=Math.round(n.main.temp),o.textContent=n.weather[0].main}(),async function(e){const n=document.querySelector("body > div > div:nth-child(1) > p.temp"),t=document.querySelector("body > div > div:nth-child(2) > p.temp"),o=document.querySelector("body > div > div:nth-child(3) > p.temp"),r=document.querySelector("body > div > div:nth-child(3) > p.day"),a=await async function(e){const n=new Map,t=await async function(e){let n=h.replace("cityName",e);return n+="&units=metric",await(await fetch(n)).json()}(e);for(const e of t.list){let t=new Date(1e3*e.dt).getDate();n.get(t)?(n.get(t).minTemp>e.main.temp_min&&(n.get(t).minTemp=e.main.temp_min),n.get(t).maxTemp<e.main.temp_max&&(n.get(t).maxTemp=e.main.temp_max)):n.set(t,{minTemp:e.main.temp_min,maxTemp:e.main.temp_max})}return n}("Cairo"),i=new Date;let A=new Date;A.setDate(A.getDate()+2),A=A.toLocaleDateString("en-us",{weekday:"long"}),r.textContent=A,a.forEach(((e,r)=>{let a=`${Math.round(e.maxTemp)}° / ${Math.round(e.minTemp)}°`;switch(r-i.getDate()){case 0:n.textContent=a;break;case 1:t.textContent=a;break;case 2:o.textContent=a}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,